<?xml version="1.0"?>

<!-- -
 * This file is part of the Echo Web Application Framework (hereinafter "Echo").
 * Copyright (C) 2002-2009 NextApp, Inc.
 *
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
-->
 
<project name="NextApp_Echo_3" default="dist" basedir=".">

    <property environment="env"/>
    <property file="custom-ant.properties"/>
    <property file="ant.properties"/>
    
    <patternset id="fileset.resources">
        <include name="**/*properties"/>
        <include name="**/*html"/>
        <include name="**/*js"/>
        <include name="**/*gif"/>
        <include name="**/*jpg"/>
        <include name="**/*png"/>
        <include name="**/*xml"/>
        <include name="**/*stylesheet"/>
        <include name="**/*css"/>
    </patternset>

    <!-- Minimize -->
    <target name="minimize" depends="clean" 
            description="Removes all non-essential files, including Eclipse temporary/build output files">
        <delete dir="${dir.temp}"/>
    </target>
    
    <!-- Clean -->
    <target name="clean"
            description="Clears all generated files, including build directories, distributables, and documentation">
        <delete dir="${dir.build}"/>
        <delete dir="${dir.dist}"/>
        <delete dir="${dir.javadoc}"/>
        <delete dir="${dir.testoutput}"/>
        <delete dir="${dir.release}"/>
    </target>
    
    <target name="dist.client.echo" depends="clean">
        <concat destfile="${dir.dist.client.echo}/Echo.js" fixlastline="yes">
            <filelist dir="${dir.src.client.corejs}">
                <file name="Core.js"/>
                <file name="Core.Web.js"/>
            </filelist>
            <filelist dir="${dir.src.client.echo}">
                <file name="Application.js"/>
                <file name="Render.js"/>
                <file name="Sync.js"/>
                <file name="Serial.js"/>
                <file name="Client.js"/>
                <file name="FreeClient.js"/>
                <file name="Arc.js"/>
            </filelist>
            <fileset dir="${dir.src.client.echo}">
                <include name="**/Sync*.js"/>
            </fileset>
        </concat>
    </target>

    <target name="dist.client.testapp" depends="clean">
        <mkdir dir="${dir.dist.client.testapp}"/>
        <copy todir="${dir.dist.client.testapp}">
            <fileset dir="${dir.src.client.corejs}"/>
            <fileset dir="${dir.src.client.echo}"/>
            <fileset dir="${dir.src.client.test-ia}"/>
        </copy>
        
    </target>
    
    <target name="compile.app" description="Compile Echo Application Framework">
        <mkdir dir="${dir.build.server-java.app}"/>
        <javac srcdir="${dir.src.server-java.app}" destdir="${dir.build.server-java.app}" 
                debug="${debug}" deprecation="yes" source="${ant.build.javac.source}" 
                target="${ant.build.javac.target}" includeantruntime="false" />
        <copy todir="${dir.build.server-java.app}">
            <fileset dir="${dir.src.server-java.app}">
                <patternset refid="fileset.resources"/>
            </fileset>
        </copy>
    </target>
    
    <target name="dist.app" depends="clean,compile.app">
        <mkdir dir="${dir.dist.lib}"/>
        <jar jarfile="${dir.dist.lib}/${jarfile.echo.app}" basedir="${dir.build.server-java.app}"/>
        <jar jarfile="${dir.dist.lib}/${srcfile.echo.app}" basedir="${dir.src.server-java.app}"/>
    </target>
    
    <target name="test.compile.app" depends="dist.app">
        <mkdir dir="${dir.build.server-java.app-test}"/>
        <javac srcdir="${dir.src.server-java.app-test}" destdir="${dir.build.server-java.app-test}" 
                debug="${debug}" deprecation="yes" source="${ant.build.javac.source}" 
                target="${ant.build.javac.target}" includeantruntime="false">
            <classpath>
                <pathelement path="${dir.dist.lib}/${jarfile.echo.app}"/>
            </classpath>
        </javac>
        <copy todir="${dir.build.server-java.app-test}">
            <fileset dir="${dir.src.server-java.app-test}">
                <patternset refid="fileset.resources"/>
            </fileset>
        </copy>
    </target>

    <target name="test.app" depends="test.compile.app" description="Test Echo app Framework">
        <mkdir dir="${dir.testoutput.app-test}"/>
        <junit printsummary="yes" haltonfailure="no">
            <classpath>
                <pathelement path="${dir.build.server-java.app-test}"/>
                <pathelement path="${dir.dist.lib}/${jarfile.echo.app}"/>
            </classpath>
            <formatter type="plain"/>
            <batchtest fork="yes" todir="${dir.testoutput.app-test}">
                <fileset dir="${dir.src.server-java.app-test}">
                   <include name="**/*Test*.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>
    
    <target name="doc.app"
            description="Create public/protected JavaDoc Document for Echo Application Framework">
        <mkdir dir="${dir.javadoc.app.public}"/>
        <javadoc sourcepath="${dir.src.server-java.app}" packagenames="nextapp.echo.app.*" 
                stylesheetfile="${javadoc.cssfile}"
                destdir="${dir.javadoc.app.public}" 
                WindowTitle="${javadoc.windowtitle}"
                DocTitle="${javadoc.doctitle.app}"
                Overview="${dir.src.server-java.app}/nextapp/echo/app/overview.html"
                Header="${javadoc.header}"/>
    </target>
    
    <target name="doc.app.private"
            description="Create private JavaDoc Document for Echo Application Framework">
        <mkdir dir="${dir.javadoc.app.private}"/>
        <javadoc sourcepath="${dir.src.server-java.app}" packagenames="nextapp.echo.app.*" 
                stylesheetfile="${javadoc.cssfile}"
                destdir="${dir.javadoc.app.private}" 
                WindowTitle="${javadoc.windowtitle}"
                DocTitle="${javadoc.doctitle.app}"
                Overview="${dir.src.server-java.app}/nextapp/echo/app/overview.html"
                Header="${javadoc.header}"
                Private="true"/>
    </target>
    
    <target name="checkenv">
        <available property="servlet.api.available" classname="javax.servlet.http.HttpServlet">
            <classpath>
                <pathelement path="${servlet.lib.jar}"/>
            </classpath>
        </available>
    </target>
    
    <target name="verify.servlet.api" depends="checkenv" unless="servlet.api.available">
        <echo message="************************************************************"/>
        <echo message="*         Servlet API not found in build classpath         *"/>
        <echo message="************************************************************"/>
        <echo message="Specified JAR = ${servlet.lib.jar}"/>
        <fail message="${servlet.lib.msg}"/>
    </target>
    
    <target name="compile.webcontainer" depends="verify.servlet.api,compile.webcontainer.impl" 
        description="Compile Echo Web Application Container"/>
    
    <target name="compile.webcontainer.impl" depends="verify.servlet.api, compile.app">
        <mkdir dir="${dir.build.server-java.webcontainer}"/>
        <javac srcdir="${dir.src.server-java.webcontainer}" destdir="${dir.build.server-java.webcontainer}" 
                debug="${debug}" deprecation="yes" source="${ant.build.javac.source}" 
                target="${ant.build.javac.target}" includeantruntime="false">
            <classpath>
                <pathelement path="${dir.build.server-java.app}"/>
                <pathelement path="${servlet.lib.jar}"/>
            </classpath>
        </javac>
        <copy todir="${dir.build.server-java.webcontainer}">
            <fileset dir="${dir.src.server-java.webcontainer}">
                <patternset refid="fileset.resources"/>
            </fileset>
        </copy>
        <copy todir="${dir.build.server-java.webcontainer.res}">
            <fileset dir="${dir.src.client.corejs}">
                <patternset refid="fileset.resources"/>
            </fileset>
            <fileset dir="${dir.src.client.echo}">
                <patternset refid="fileset.resources"/>
            </fileset>
        </copy>
    </target>
    
    <target name="dist.webcontainer" depends="clean,compile.webcontainer">
        <mkdir dir="${dir.dist.lib}"/>
        <jar jarfile="${dir.dist.lib}/${jarfile.echo.webcontainer}" basedir="${dir.build.server-java.webcontainer}"/>
        <jar jarfile="${dir.dist.lib}/${srcfile.echo.webcontainer}" basedir="${dir.src.server-java.webcontainer}"/>
    </target>
    
    <target name="test.compile.webcontainer" depends="dist.app, dist.webcontainer">
        <mkdir dir="${dir.build.server-java.webcontainer-test}"/>
        <javac srcdir="${dir.src.server-java.webcontainer-test}" destdir="${dir.build.server-java.webcontainer-test}" 
                debug="${debug}" deprecation="yes" source="${ant.build.javac.source}" 
                target="${ant.build.javac.target}" includeantruntime="false">
            <classpath>
                <pathelement path="${dir.dist.lib}/${jarfile.echo.app}"/>
                <pathelement path="${dir.dist.lib}/${jarfile.echo.webcontainer}"/>
                <pathelement path="${servlet.lib.jar}"/>
            </classpath>
        </javac>
        <copy todir="${dir.build.server-java.webcontainer-test}">
            <fileset dir="${dir.src.server-java.webcontainer-test}">
                <patternset refid="fileset.resources"/>
            </fileset>
        </copy>
    </target>

    <target name="test.webcontainer" depends="test.compile.webcontainer" description="Test Web Application Container">
        <mkdir dir="${dir.testoutput.webcontainer-test}"/>
        <junit printsummary="yes" haltonfailure="yes">
            <classpath>
                <pathelement path="${dir.build.server-java.webcontainer-test}"/>
                <pathelement path="${servlet.lib.jar}"/>
                <pathelement path="${dir.dist.lib}/${jarfile.echo.app}"/>
                <pathelement path="${dir.dist.lib}/${jarfile.echo.webcontainer}"/>
            </classpath>
            <formatter type="plain"/>
            <batchtest fork="yes" todir="${dir.testoutput.webcontainer-test}">
                <fileset dir="${dir.src.server-java.webcontainer-test}">
                   <include name="**/*Test*.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>
    
    <target name="doc.webcontainer"
            description="Create public/protected JavaDoc Document for Echo Web Application Container">
        <mkdir dir="${dir.javadoc.webcontainer.public}"/>
        <javadoc sourcepath="${dir.src.server-java.app};${dir.src.server-java.webcontainer}" 
                packagenames="nextapp.echo.webcontainer.*" 
                stylesheetfile="${javadoc.cssfile}"
                destdir="${dir.javadoc.webcontainer.public}" 
                WindowTitle="${javadoc.windowtitle}"
                DocTitle="${javadoc.doctitle.webcontainer}"
                Overview="${dir.src.server-java.webcontainer}/nextapp/echo/webcontainer/overview.html"
                Header="${javadoc.header}">
            <classpath>
                <pathelement path="${servlet.lib.jar}"/>
            </classpath>
        </javadoc>
    </target>
    
    <target name="doc.webcontainer.private"
            description="Create private JavaDoc Document for Echo Web Application Container">
        <mkdir dir="${dir.javadoc.webcontainer.private}"/>
        <javadoc sourcepath="${dir.src.server-java.app};${dir.src.server-java.webcontainer}" 
                packagenames="nextapp.echo.webcontainer.*" 
                stylesheetfile="${javadoc.cssfile}"
                destdir="${dir.javadoc.webcontainer.private}" 
                WindowTitle="${javadoc.windowtitle}"
                DocTitle="${javadoc.doctitle.webcontainer}"
                Overview="${dir.src.server-java.webcontainer}/nextapp/echo/webcontainer/overview.html"
                Header="${javadoc.header}"
                Private="true">
            <classpath>
                <pathelement path="${servlet.lib.jar}"/>
            </classpath>
        </javadoc>
    </target>
    
    <target name="dist" depends="clean, dist.app, dist.webcontainer"/>
    
    <target name="test" depends="test.app, test.webcontainer"/>
    
    <target name="doc.public" 
            depends="doc.app, doc.webcontainer"/>

    <target name="doc.private" 
            depends="doc.app.private, doc.webcontainer.private"/>

    <target name="doc" 
            depends="doc.app, doc.app.private, doc.webcontainer, doc.webcontainer.private"/>

    <target name="compile.style-converter" description="Compile Echo2-Echo3 Style Conversion Utility">
        <mkdir dir="${dir.build.util.style-converter}"/>
        <javac srcdir="${dir.src.util.style-converter}" destdir="${dir.build.util.style-converter}" 
                debug="${debug}" deprecation="yes" source="${ant.build.javac.source}" 
                target="${ant.build.javac.target}" includeantruntime="false"/>
    </target>
    
    <target name="dist.style-converter" depends="clean,compile.style-converter">
        <mkdir dir="${dir.dist.util}"/>
        <jar jarfile="${dir.dist.util}/${jarfile.style-converter}" basedir="${dir.build.util.style-converter}">
            <manifest>
                <attribute name="Main-Class" value="nextapp.echo2migration.StyleSheetConverter"/>
            </manifest>
        </jar>
    </target>

    <target name="compile.testapp" depends="dist">
        <mkdir dir="${dir.build.server-java.testapp}/WEB-INF/classes"/>
        <mkdir dir="${dir.build.server-java.testapp}/WEB-INF/lib"/>
        <copy todir="${dir.build.server-java.testapp}/WEB-INF/lib" file="${dir.dist.lib}/${jarfile.echo.app}"/>
        <copy todir="${dir.build.server-java.testapp}/WEB-INF/lib" file="${dir.dist.lib}/${jarfile.echo.webcontainer}"/>
        <copy todir="${dir.build.server-java.testapp}/WEB-INF">
            <fileset dir="${dir.src.server-java.test-ia.deploy}"/>
        </copy>
        <copy todir="${dir.build.server-java.testapp}">
            <fileset dir="${dir.src.server-java.test-ia.htdocs}"/>
        </copy>
        <javac srcdir="${dir.src.server-java.test-ia.lib}" destdir="${dir.build.server-java.testapp}/WEB-INF/classes" 
                debug="${debug}" deprecation="yes" source="${ant.build.javac.source}" 
                target="${ant.build.javac.target}" includeantruntime="false">
            <classpath>
                <pathelement path="${servlet.lib.jar}"/>
                <pathelement path="${dir.dist.lib}/${jarfile.echo.app}"/>
                <pathelement path="${dir.dist.lib}/${jarfile.echo.webcontainer}"/>
            </classpath>
        </javac>
        <copy todir="${dir.build.server-java.testapp}/WEB-INF/classes">
            <fileset dir="${dir.src.server-java.test-ia.lib}">
                <patternset refid="fileset.resources"/>
            </fileset>
        </copy>
    </target>

    <target name="dist.testapp" depends="compile.testapp" 
            description="Builds a web archive of the interactive test application">
        <mkdir dir="${dir.dist.testapp}"/>
        <jar jarfile="${dir.dist.testapp}/${warfile.testapp}" basedir="${dir.build.server-java.testapp}"/>
    </target>

    <target name="release" depends="clean, dist, dist.style-converter, dist.testapp, doc.public">
        <mkdir dir="${dir.build.server-java.release.root}"/>
        <mkdir dir="${dir.build.server-java.release.root}/SourceCode"/>
        <mkdir dir="${dir.build.server-java.release.root}/Documentation"/>
        <mkdir dir="${dir.build.server-java.release.root}/JavaScriptLibraries"/>
        <mkdir dir="${dir.build.server-java.release.root}/JavaLibraries"/>
        <mkdir dir="${dir.build.server-java.release.root}/JavaWebArchives"/>
        <mkdir dir="${dir.build.server-java.release.root}/Util"/>
        <mkdir dir="${dir.build.server-java.release.root}/Licensing"/>
        <copy todir="${dir.build.server-java.release.root}" file="${dir.resource}/ReadMe.txt"/>
        
        <!-- Source Code -->
        <copy todir="${dir.build.server-java.release.root}/SourceCode/src">
            <fileset dir="${dir.src}">
                <exclude name=".svn/**"/>
            </fileset>
        </copy>
        <copy todir="${dir.build.server-java.release.root}/SourceCode/resource">
            <fileset dir="${dir.resource}">
                <exclude name=".svn/**"/>
            </fileset>
        </copy>
        <copy todir="${dir.build.server-java.release.root}/SourceCode">
            <fileset file="build.xml"/>
            <fileset file="ant.properties"/>
        </copy>
        
        <!-- JavaScript Libraries -->
        <copy todir="${dir.build.server-java.release.root}/JavaScriptLibraries">
            <fileset dir="${dir.src.client.corejs}"/>
            <fileset dir="${dir.src.client.echo}"/>
        </copy>
        
        <!-- Binary Libraries -->
        <copy todir="${dir.build.server-java.release.root}/JavaLibraries">
            <fileset dir="${dir.dist.lib}"/>
        </copy>
        
        <!-- Binary Web Applications: Interactive Test Application -->
        <copy todir="${dir.build.server-java.release.root}/JavaWebArchives">
            <fileset dir="${dir.dist.testapp}"/>
        </copy>
        
        <!-- Utilities -->
        <copy todir="${dir.build.server-java.release.root}/Util">
            <fileset dir="${dir.dist.util}"/>
        </copy>

        <!-- Documentation -->
        <copy todir="${dir.build.server-java.release.root}/Documentation/api/public">
            <fileset dir="${dir.javadoc.public}"/>
        </copy>
        <copy todir="${dir.build.server-java.release.root}/Documentation">
            <fileset dir="${dir.resource}/Documentation"/>
        </copy>
        
        <!-- Licensing -->
        <copy todir="${dir.build.server-java.release.root}/Licensing">
            <fileset dir="${dir.resource}/Licensing"/>
        </copy>
        
        <!-- Zip & TarGz -->
        <mkdir dir="${dir.release}"/>
        <zip zipfile="${dir.release}/${zipfile.release}" basedir="${dir.build.server-java.release}"/>
        <tar tarfile="${dir.release}/${tarfile.release}" basedir="${dir.build.server-java.release}" longfile="gnu"/>
        <gzip src="${dir.release}/${tarfile.release}" zipfile="${dir.release}/${tgzfile.release}"/>
        <delete file="${dir.release}/${tarfile.release}"/>
    </target>
	
	<target name="mvn-install" depends="dist" description="Installs the jar into the local maven repository">
		<condition property="onWindows">
			<os family="windows"/>
		</condition>
		<antcall target="mvn-install-win"/>
		<antcall target="mvn-install-unix"/>
	</target>
	
    <target name="mvn-install-win"
        description="Installs the jars into the local maven repository (windows environment)"
    	if="onWindows">
        <exec executable="cmd">
            <arg value="/c"/>
            <arg value="mvn install:install-file -DpomFile=resource/maven/echo3-app-pom.xml -Dfile=dist${file.separator}lib${file.separator}${jarfile.echo.app}"/>
            </exec>
            <exec executable="cmd">
                <arg value="/c"/>
                <arg value="mvn install:install-file -DpomFile=resource/maven/echo3-webcontainer-pom.xml -Dfile=dist${file.separator}lib${file.separator}${jarfile.echo.webcontainer}"/>
            </exec>
    </target>
	
    <target name="mvn-install-unix"
        description="Installs the jar into the local maven repository (unix environment)"
    	unless="onWindows">
        <exec executable="mvn">
            <arg value="install:install-file"/>
        	<arg value="-DpomFile=resource/maven/echo3-app-pom.xml"/>
            <arg value="-Dfile=dist${file.separator}lib${file.separator}echo3-app-${release.version}.jar"/>
        </exec>
        <exec executable="mvn">
            <arg value="install:install-file"/>
        	<arg value="-DpomFile=resource/maven/echo3-webcontainer-pom.xml"/>
            <arg value="-Dfile=dist${file.separator}lib${file.separator}echo3-webcontainer-${release.version}.jar"/>
        </exec>
    </target>
    
    <target name="jslint.corejs">
        <java fork="true" jar="${dir.resource.jslint}/rhino.jar">
            <arg value="${dir.resource.jslint}/jslint.js"/>
            <arg value="${dir.src.client.corejs}/"/>
        </java>
    </target>

    <target name="jslint.echo">
        <java fork="true" jar="${dir.resource.jslint}/rhino.jar">
            <arg value="${dir.resource.jslint}/jslint.js"/>
            <arg value="${dir.src.client.echo}/"/>
        </java>
    </target>

    <target name="jslint.webcontainer">
        <java fork="true" jar="${dir.resource.jslint}/rhino.jar">
            <arg value="${dir.resource.jslint}/jslint.js"/>
            <arg value="${dir.src.server-java.webcontainer.res}/"/>
        </java>
    </target>
    
    <target name="jslint" depends="jslint.corejs,jslint.echo,jslint.webcontainer">
    </target>

</project>
